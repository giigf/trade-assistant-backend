# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserModel {
  id: Int!
  email: String!
  name: String!
  role: Role!
}

enum Role {
  USER
  ADMIN
}

type ResponseToken {
  accessToken: String
  refreshToken: String
}

type TradeModel {
  id: Int!
  userId: Int!
  date_start: DateTime!
  date_end: DateTime!
  note: String
  start_price: Float!
  end_price: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedTrades {
  items: [TradeModel!]!
  total: Int!
  page: Int!
  limit: Int!
}

type TradeResponse {
  success: Boolean!
  message: String
  data: TradeModel
}

type PaginatedTradesResponse {
  success: Boolean!
  message: String
  data: PaginatedTrades
}

type BooleanResponse {
  success: Boolean!
  message: String
  data: Boolean
}

type CommentModel {
  id: Int!
  userId: Int!
  tradeId: Int!
  date: DateTime!
  text: String!
}

type Query {
  getUsers: [UserModel!]!
  getUser(id: Int!): UserModel!
  me: UserModel!
  getAllTrade(filter: GetTradesArgs!): PaginatedTradesResponse!
  getTrade(id: Int!): TradeResponse!
  getCommentsTrade(tradeId: Int!): [CommentModel!]!
}

input GetTradesArgs {
  page: Int = 1
  limit: Int = 10
  sortBy: TradeSortField = DATE_START
  sortDirection: SortDirection = DESC
  noteSearch: String
  dateFrom: DateTime
  dateTo: DateTime
  minStartPrice: Float
  maxStartPrice: Float
  minEndPrice: Float
  maxEndPrice: Float
  isProfitable: Boolean
}

enum TradeSortField {
  ID
  DATE_START
  DATE_END
  START_PRICE
  END_PRICE
}

enum SortDirection {
  ASC
  DESC
}

type Mutation {
  updateUser(data: UpdateUserInput!): UserModel!
  deleteUser(id: Int!): Boolean!
  register(data: RegisterInput!): ResponseToken!
  login(data: LoginInput!): ResponseToken!
  refresh(refreshToken: String!): ResponseToken!
  createTrade(data: CreateTradeInput!): TradeResponse!
  updateTrade(data: UpdateTradeInput!): TradeResponse!
  deleteTrade(id: Int!): BooleanResponse!
  createComment(data: CreateCommentInput!): CommentModel!
}

input UpdateUserInput {
  email: String
  name: String
  id: Int!
}

input RegisterInput {
  email: String!
  name: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input CreateTradeInput {
  date_start: DateTime!
  date_end: DateTime!
  note: String
  start_price: Float!
  end_price: Float!
}

input UpdateTradeInput {
  date_start: DateTime
  date_end: DateTime
  note: String
  start_price: Float
  end_price: Float
  id: Int!
}

input CreateCommentInput {
  text: String!
  tradeId: Int!
}