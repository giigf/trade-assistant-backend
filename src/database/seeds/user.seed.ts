// src/database/seeds/user.seed.ts
import { DataSource } from 'typeorm';
import { User, Role } from '../../user/user.entity';
import { UserFactory } from '../factories/user.factory';
import { BaseSeed } from './interfaces/seed.interface';

export class UserSeed extends BaseSeed {
  getName(): string {
    return 'UserSeed';
  }

  async run(dataSource: DataSource): Promise<void> {
    const userRepository = dataSource.getRepository(User);
    
    console.log('üå± –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const existingUsersCount = await userRepository.count();
    if (existingUsersCount > 0) {
      console.log('‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    const adminData = await UserFactory.createAdmin({
      name: 'Admin User',
      email: 'admin@example.com',
    });
    const admin = userRepository.create(adminData);
    await userRepository.save(admin);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω:', admin.name);

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUserData = await UserFactory.create({
      name: 'Test User',
      email: 'test@example.com',
    });
    const testUser = userRepository.create(testUserData);
    await userRepository.save(testUser);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', testUser.name);

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    const traderNames = [
      { name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤', email: 'alexey.petrov@example.com' },
      { name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', email: 'maria.sidorova@example.com' },
      { name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤', email: 'dmitry.kozlov@example.com' },
      { name: '–ê–Ω–Ω–∞ –í–æ–ª–∫–æ–≤–∞', email: 'anna.volkova@example.com' },
      { name: '–°–µ—Ä–≥–µ–π –ù–æ–≤–∏–∫–æ–≤', email: 'sergey.novikov@example.com' },
    ];

    for (const traderData of traderNames) {
      const userData = await UserFactory.create(traderData);
      const user = userRepository.create(userData);
      await userRepository.save(user);
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω —Ç—Ä–µ–π–¥–µ—Ä:', user.name);
    }

    const totalUsers = await userRepository.count();
    console.log(`üéâ UserSeed –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}`);
  }
}