// src/database/seeds/run-seeds.ts (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è PostgreSQL)
import { DataSource } from 'typeorm';
import { dataSourceOptions } from '../../config/typeorm.config';
import { UserSeed } from './user.seed';
import { TradeSeed } from './trade.seed';
import { CommentSeed } from './comment.seed';
import { BaseSeed } from './interfaces/seed.interface';

class SeedRunner {
  private dataSource: DataSource;
  private seeds: BaseSeed[] = [
    new UserSeed(),
    new TradeSeed(),
    new CommentSeed(),
  ];

  constructor() {
    this.dataSource = new DataSource(dataSourceOptions);
  }

  async run(): Promise<void> {
    try {
      console.log('üöÄ –ó–∞–ø—É—Å–∫ seed –ø—Ä–æ—Ü–µ—Å—Å–∞...');
      console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
      
      await this.dataSource.initialize();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${this.seeds.length} seed —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
      console.log('=' .repeat(50));

      for (let i = 0; i < this.seeds.length; i++) {
        const seed = this.seeds[i];
        const seedNumber = i + 1;
        
        console.log(`\n[${seedNumber}/${this.seeds.length}] üå± –í—ã–ø–æ–ª–Ω—è–µ–º ${seed.getName()}...`);
        console.log('-'.repeat(40));
        
        const startTime = Date.now();
        await seed.run(this.dataSource);
        const endTime = Date.now();
        
        console.log(`‚úÖ ${seed.getName()} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${endTime - startTime}ms`);
        console.log('-'.repeat(40));
      }

      console.log('\n' + '='.repeat(50));
      console.log('üéâ –í—Å–µ seeds —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      await this.showFinalStats();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ seeds:', error);
      process.exit(1);
    } finally {
      if (this.dataSource.isInitialized) {
        await this.dataSource.destroy();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
      }
    }
  }

  async runSpecific(seedNames: string[]): Promise<void> {
    try {
      console.log(`üéØ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö seeds: ${seedNames.join(', ')}`);
      
      await this.dataSource.initialize();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

      const seedsToRun = this.seeds.filter(seed => 
        seedNames.includes(seed.getName())
      );

      if (seedsToRun.length === 0) {
        console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ seeds —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏');
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ seeds:', this.seeds.map(s => s.getName()).join(', '));
        return;
      }

      for (const seed of seedsToRun) {
        console.log(`\nüå± –í—ã–ø–æ–ª–Ω—è–µ–º ${seed.getName()}...`);
        const startTime = Date.now();
        await seed.run(this.dataSource);
        const endTime = Date.now();
        console.log(`‚úÖ ${seed.getName()} –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${endTime - startTime}ms`);
      }

      console.log('\nüéâ –£–∫–∞–∑–∞–Ω–Ω—ã–µ seeds —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
      await this.showFinalStats();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ seeds:', error);
      process.exit(1);
    } finally {
      if (this.dataSource.isInitialized) {
        await this.dataSource.destroy();
      }
    }
  }

  async reset(): Promise<void> {
    try {
      console.log('üóëÔ∏è  –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      await this.dataSource.initialize();
      
      // –î–ª—è PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º TRUNCATE —Å CASCADE
      console.log('üßπ –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É foreign key constraints
      await this.dataSource.query('SET session_replication_role = replica;');
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      try {
        await this.dataSource.query('TRUNCATE TABLE comments CASCADE;');
        console.log('  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ comments –æ—á–∏—â–µ–Ω–∞');
      } catch (e) {
        console.log('  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ comments –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—É—Å—Ç–∞');
      }
      
      try {
        await this.dataSource.query('TRUNCATE TABLE trades CASCADE;');
        console.log('  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ trades –æ—á–∏—â–µ–Ω–∞');
      } catch (e) {
        console.log('  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ trades –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—É—Å—Ç–∞');
      }
      
      try {
        await this.dataSource.query('TRUNCATE TABLE users CASCADE;');
        console.log('  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ users –æ—á–∏—â–µ–Ω–∞');
      } catch (e) {
        console.log('  ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ users –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—É—Å—Ç–∞');
      }
      
      // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É foreign key constraints
      await this.dataSource.query('SET session_replication_role = DEFAULT;');
      
      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      console.log('‚ÑπÔ∏è  –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.');
    } finally {
      if (this.dataSource.isInitialized) {
        await this.dataSource.destroy();
      }
    }
  }

  private async showFinalStats(): Promise<void> {
    try {
      console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
      console.log('=' .repeat(30));
      
      const userCount = await this.dataSource.getRepository('User').count();
      const tradeCount = await this.dataSource.getRepository('Trade').count();
      const commentCount = await this.dataSource.getRepository('Comment').count();
      
      console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);
      console.log(`üíº –¢—Ä–µ–π–¥–æ–≤: ${tradeCount}`);
      console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${commentCount}`);
      console.log('=' .repeat(30));
      
    } catch (error) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', error.message);
    }
  }

  listSeeds(): void {
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ seeds:');
    this.seeds.forEach((seed, index) => {
      console.log(`  ${index + 1}. ${seed.getName()}`);
    });
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const runner = new SeedRunner();
  const args = process.argv.slice(2);

  if (args.length === 0) {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ seeds
    await runner.run();
    return;
  }

  const command = args[0];

  switch (command) {
    case '--reset':
      await runner.reset();
      if (args[1] !== '--no-seed') {
        console.log('\nüîÑ –ó–∞–ø—É—Å–∫–∞–µ–º seeds –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞...');
        await runner.run();
      }
      break;
      
    case '--list':
      runner.listSeeds();
      break;
      
    case '--only':
      if (args.length < 2) {
        console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞ seeds –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
        console.log('–ü—Ä–∏–º–µ—Ä: npm run seed:run -- --only UserSeed TradeSeed');
        runner.listSeeds();
        process.exit(1);
      }
      await runner.runSpecific(args.slice(1));
      break;
      
    case '--help':
      console.log('üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
      console.log('  npm run seed:run                    - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ seeds');
      console.log('  npm run seed:run -- --reset         - –û—á–∏—Å—Ç–∏—Ç—å –ë–î –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ seeds');
      console.log('  npm run seed:run -- --reset --no-seed - –¢–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∏—Ç—å –ë–î');
      console.log('  npm run seed:run -- --only UserSeed - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ seeds');
      console.log('  npm run seed:run -- --list          - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ seeds');
      console.log('  npm run seed:run -- --help          - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
      break;
      
    default:
      console.log('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞:', command);
      console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏');
      process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}

export { SeedRunner };