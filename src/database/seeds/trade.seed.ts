// src/database/seeds/trade.seed.ts
import { DataSource } from 'typeorm';
import { Trade } from '../../trade/trade.entity';
import { User } from '../../user/user.entity';
import { TradeFactory } from '../factories/trade.factory';
import { BaseSeed } from './interfaces/seed.interface';

export class TradeSeed extends BaseSeed {
  getName(): string {
    return 'TradeSeed';
  }

  async run(dataSource: DataSource): Promise<void> {
    const tradeRepository = dataSource.getRepository(Trade);
    const userRepository = dataSource.getRepository(User);
    
    console.log('üå± –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥—ã...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç—Ä–µ–π–¥—ã
    const existingTradesCount = await tradeRepository.count();
    if (existingTradesCount > 0) {
      console.log('‚ö†Ô∏è  –¢—Ä–µ–π–¥—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await userRepository.find();
    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ UserSeed.');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–π–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of users) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–π–¥–æ–≤
      if (user.email === 'admin@example.com') {
        continue;
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
      const profitableTrades = [
        TradeFactory.createProfitableTrade(user),
        TradeFactory.createProfitableTrade(user),
        TradeFactory.createProfitableTrade(user),
      ];
      
      const losingTrades = [
        TradeFactory.createLosingTrade(user),
        TradeFactory.createLosingTrade(user),
      ];
      
      const ongoingTrades = [
        TradeFactory.createOngoingTrade(user),
      ];
      
      const regularTrades = TradeFactory.createMany(user, 4);

      const allUserTrades = [
        ...profitableTrades,
        ...losingTrades,
        ...ongoingTrades,
        ...regularTrades,
      ];

      const trades = tradeRepository.create(allUserTrades);
      await tradeRepository.save(trades);
      
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${trades.length} —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name}`);
    }

    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–π–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testUser = users.find(u => u.email === 'test@example.com');
    if (testUser) {
      const additionalTrades = TradeFactory.createMany(testUser, 15);
      const trades = tradeRepository.create(additionalTrades);
      await tradeRepository.save(trades);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ${trades.length} —Ç—Ä–µ–π–¥–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
    }

    const totalTrades = await tradeRepository.count();
    console.log(`üéâ TradeSeed –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ç—Ä–µ–π–¥–æ–≤: ${totalTrades}`);
  }
}